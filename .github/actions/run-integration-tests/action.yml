name: Run Integration Tests
description: Runs integration tests against a specific database type
inputs:
  database-type:
    description: 'Database type to test against (sqlite or postgres)'
    required: true
    type: string
  coverage-enabled:
    description: 'Whether to enable coverage collection'
    required: false
    type: boolean
    default: false

runs:
  using: "composite"
  steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Set up Go Environment
      uses: ./.github/actions/setup-go

    - name: 🗄️ Cache Go Modules
      uses: actions/cache@v4
      id: cache-go-modules
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-modules-

    - name: 📦 Install Dependencies
      run: |
        cd backend
        go mod download
        cd ../tests/integration
        go mod download

    - name: 🗄️ Setup PostgreSQL Database
      if: inputs.database-type == 'postgres'
      run: |
        PGPASSWORD=asgthunder psql -h localhost -p 5432 -U asgthunder -d thunderdb -c "CREATE DATABASE identitydb;"
        PGPASSWORD=asgthunder psql -h localhost -p 5432 -U asgthunder -d thunderdb -c "CREATE DATABASE runtimedb;"
        PGPASSWORD=asgthunder psql -h localhost -p 5432 -U asgthunder -d identitydb < backend/dbscripts/thunderdb/postgres.sql
        PGPASSWORD=asgthunder psql -h localhost -p 5432 -U asgthunder -d runtimedb < backend/dbscripts/runtimedb/postgres.sql

    - name: 📝 Configure Test Database
      run: |
        chmod +x backend/tests/scripts/setup-test-config.sh
        ./backend/tests/scripts/setup-test-config.sh
      env:
        DB_TYPE: ${{ inputs.database-type }}

    - name: 🧪 Run Integration Tests
      run: |
        echo "Running integration tests against ${{ inputs.database-type }} database..."
        
        # Set up coverage directory if coverage is enabled
        if [ "${{ inputs.coverage-enabled }}" = "true" ]; then
          export GOCOVERDIR="target/out/.test/integration"
          mkdir -p "$GOCOVERDIR"
          echo "Coverage collection enabled: GOCOVERDIR=$GOCOVERDIR"
        fi
        
        # Run integration tests with database type
        DB_TYPE=${{ inputs.database-type }} make test_integration
      env:
        DB_TYPE: ${{ inputs.database-type }}
        GOCOVERDIR: ${{ inputs.coverage-enabled == 'true' && 'target/out/.test/integration' || '' }}
